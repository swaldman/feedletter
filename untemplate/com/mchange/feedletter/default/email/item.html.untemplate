import java.time.ZoneId
import java.time.format.{DateTimeFormatter,FormatStyle}

val formatter =  DateTimeFormatter.ofLocalizedDateTime(FormatStyle.LONG, FormatStyle.LONG)

val (info, contents) = tup

val images = contents.media.filter( _.mimeType.map( _.startsWith("image") ).getOrElse(false) )

val (topImageUrl, bottomImageUrls) =
  images.size match
    case 0 => (None, None)
    case 1 => (Some(images.head.url), None)
    case n => (None, Some(images.map(_.url)))
end val

( tup : (ComposeInfo.Universal, ItemContent) )[]~()>

    <!-- Item GUID: <( contents.guid )> -->
    <div class="item">
<()
  contents.title.foreach { title =>
()>
      <div class="item-title">
        <( ifLink( contents.link, title ) )>
      </div>
<()
  }
  contents.author.foreach { author =>
()>
      <div class="item-author">
        by <( author )>
      </div>
<()
  }
  topImageUrl.foreach { url =>
()>
      <div class="media-image top-image">
        <img src="<( url )>">
      </div>
<()
  }
  contents.article.foreach { article =>
()>
      <div class="item-contents">
        <( article )>
      </div>
<()
  }
  contents.pubDate.foreach { pubDate =>
()>
      <div class="item-date">
        Published <( ifLink( contents.link, formatter.format( pubDate.atZone(info.timeZone) ) ) )>
      </div>
<()
  }
  if bottomImageUrls.nonEmpty then {
()>
      <div class="bottom-images">
<()
    bottomImageUrls.foreach { url =>
()>
        <div class="media-image top-image">
          <img src="<( url )>">
        </div>
<()
    }
()>
      </div>
<()
  }
()>
    </div>

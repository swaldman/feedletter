val d = scala.xml.Utility.escape( sci.destination.fullDesc )

( sci : StatusChangeInfo )[]~()>

<html>
  <head>
    <style>
<( style_css() )>
    </style>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>[<( sci.subscribableName )>] Subscription <( sci.change )></title>
  </head>
  <body>
    <div class="item">
<()
    sci.change match {
      case SubscriptionStatusChange.Created => {
()>
        <h1>Subscription created!</h1>

        <hr style="border-bottom: 1px solid black">

        <p><( d )> has been subscribed to <b><( sci.subscribableName )></b>.</p>
<()
        if sci.requiresConfirmation then {
()>
        <p>The subscription still needs to be confirmed.</p>

        <p>If this subscription was made error, please don't confirm it.</p>

        <p>Or you can explicitly <a href="<( sci.unsubscribeLink )>">unsubscribe</a>.</p>
<()
        }
        else {
()>
        <p>If this subscription was made error, please <a href="<( sci.unsubscribeLink )>">unsubscribe</a>.</p>
<()
        }
      }
      case SubscriptionStatusChange.Confirmed => {
()>
        <h1>Subscription confirmed!</h1>

        <hr style="border-bottom: 1px solid black">

        <p>The subscription of <( d )> to <b><( sci.subscribableName )></b> has been confirmed.</p>

        <p>If you confirmed this subscription in error, you can <a href="<( sci.unsubscribeLink )>">unsubscribe</a>.</p>
<()
      }
      case SubscriptionStatusChange.Removed => {
()>
        <h1>Subscription removed!</h1>

        <hr style="border-bottom: 1px solid black">

        <p><( d )> has been unsubscribed from <b><( sci.subscribableName )></b>.</p>

        <p>If you unsubscribed in error, you can resubscribe by <a href="<( sci.resubscribeLink )>">clicking here</a>.</p>
<()
      }
    }
()>
    </div>
  </body>
</html>


